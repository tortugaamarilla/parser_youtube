import streamlit as st
import pandas as pd
import re
import time
import random
import requests
from bs4 import BeautifulSoup

# –í–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞–º–∏
if 'results_df' not in st.session_state:
    st.session_state.results_df = None

if 'is_processing' not in st.session_state:
    st.session_state.is_processing = False

if 'last_input' not in st.session_state:
    st.session_state.last_input = ""

# –°–ø–∏—Å–æ–∫ user-agent –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–∞–∑–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
USER_AGENTS = [
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.4 Safari/605.1.15',
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/112.0',
    'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36',
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36 Edg/113.0.1774.42'
]

def get_video_views(video_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –≤–∏–¥–µ–æ –ø–æ –µ–≥–æ ID –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä—è–º–æ–π –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å ID
        if not re.match(r'^[0-9A-Za-z_-]{11}$', video_id):
            return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≤–∏–¥–µ–æ"
            
        # –°–æ–∑–¥–∞–µ–º URL –∏–∑ ID –≤–∏–¥–µ–æ
        url = f"https://www.youtube.com/watch?v={video_id}"
        
        # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç 2 –¥–æ 5 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        time.sleep(random.uniform(2, 5))
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π User-Agent
        headers = {
            'User-Agent': random.choice(USER_AGENTS),
            'Accept-Language': 'en-US,en;q=0.9',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8',
            'Referer': 'https://www.google.com/'
        }
        
        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ HTTP
        
        # –ü–∞—Ä—Å–∏–º HTML
        soup = BeautifulSoup(response.text, 'html.parser')
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ JSON-—Å–∫—Ä–∏–ø—Ç–∞
        scripts = soup.find_all('script')
        for script in scripts:
            script_text = script.string
            if script_text and 'var ytInitialData' in script_text:
                # –ò—â–µ–º —á–∏—Å–ª–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
                view_count_match = re.search(r'"viewCount":\{"videoViewCountRenderer":\{"viewCount":\{"simpleText":"([\d,]+)', script_text)
                if view_count_match:
                    views_text = view_count_match.group(1)
                    # –£–¥–∞–ª—è–µ–º –∑–∞–ø—è—Ç—ã–µ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
                    return int(views_text.replace(',', ''))
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –ø–µ—Ä–≤–æ–º –º–µ—Ç–æ–¥–µ, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω
        for script in scripts:
            script_text = script.string
            if script_text and '"viewCount":' in script_text:
                view_count_match = re.search(r'"viewCount":"([\d,]+)"', script_text)
                if view_count_match:
                    views_text = view_count_match.group(1)
                    return int(views_text.replace(',', ''))
        
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"
    except requests.HTTPError as e:
        return f"–û—à–∏–±–∫–∞ HTTP: {str(e)}"
    except requests.RequestException as e:
        return f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
    except Exception as e:
        return f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è ID –≤–∏–¥–µ–æ
def process_input(input_text, is_full_url):
    lines = [line.strip() for line in input_text.split("\n")]
    processed_data = []
    
    for line in lines:
        if not line:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            processed_data.append({
                "–ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞": "",
                "ID –≤–∏–¥–µ–æ": "",
                "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã": "N/A",
                "–°—Ç–∞—Ç—É—Å": "–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞"
            })
            continue
            
        video_id = None
        if is_full_url:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å ID –≤–∏–¥–µ–æ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ URL
            match = re.search(r'(?:v=|\/)([0-9A-Za-z_-]{11}).*', line)
            if match:
                video_id = match.group(1)
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É ID –≤–∏–¥–µ–æ
            if re.match(r'^[0-9A-Za-z_-]{11}$', line):
                video_id = line
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–æ–∫–µ, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, —É–¥–∞–ª–æ—Å—å –ª–∏ –∏–∑–≤–ª–µ—á—å ID
        processed_data.append({
            "–ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞": line,
            "ID –≤–∏–¥–µ–æ": video_id if video_id else "",
            "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã": "N/A",
            "–°—Ç–∞—Ç—É—Å": "–û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏" if video_id else "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≤–∏–¥–µ–æ"
        })
    
    return processed_data

def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    st.set_page_config(
        page_title="YouTube Views Parser",
        page_icon="üìä",
        layout="wide",
    )
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    st.title("–ü–∞—Ä—Å–µ—Ä –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ YouTube –≤–∏–¥–µ–æ")
    
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    st.markdown("""
    –í–≤–µ–¥–∏—Ç–µ ID –≤–∏–¥–µ–æ YouTube (–ø–æ –æ–¥–Ω–æ–º—É –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ).
    ID –≤–∏–¥–µ–æ ‚Äî —ç—Ç–æ —á–∞—Å—Ç—å URL –ø–æ—Å–ª–µ `v=`. –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è `https://www.youtube.com/watch?v=dQw4w9WgXcQ` ID –±—É–¥–µ—Ç `dQw4w9WgXcQ`.
    
    **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** –ü—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ ID (–±–æ–ª–µ–µ 100) –ø—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. 
    –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∏–∂–µ.
    """)
    
    # –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    col1, col2 = st.columns([2, 3])
    
    with col1:
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è ID –≤–∏–¥–µ–æ
        video_ids_input = st.text_area(
            "–í–≤–µ–¥–∏—Ç–µ ID –≤–∏–¥–µ–æ (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ):", 
            height=200,
            key="input_area",
            value=st.session_state.last_input
        )
        
        # –û–ø—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ URL
        full_url_option = st.checkbox("–Ø –≤–≤–æ–∂—É –ø–æ–ª–Ω—ã–µ URL –≤–∏–¥–µ–æ", key="full_url")
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
        start_button = st.button("–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä—ã")
        
        if start_button and video_ids_input:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            st.session_state.last_input = video_ids_input
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –≤–∏–¥–µ–æ
            processed_data = process_input(video_ids_input, full_url_option)
            
            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            df = pd.DataFrame(processed_data)
            st.session_state.results_df = df
            st.session_state.is_processing = True
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            st.rerun()
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    if st.session_state.is_processing and st.session_state.results_df is not None:
        df = st.session_state.results_df
        
        with col2:
            st.subheader("–•–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
            
            # –°–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç—å –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            progress_container = st.empty()
            progress_bar = st.progress(0)
            status_text = st.empty()
            count_text = st.empty()
            
            # –°—á–µ—Ç—á–∏–∫–∏
            total_count = len(df)
            pending_count = sum(df["–°—Ç–∞—Ç—É—Å"] == "–û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            processed_count = total_count - pending_count
            success_count = sum(df["–°—Ç–∞—Ç—É—Å"] == "–£—Å–ø–µ—à–Ω–æ")
            error_count = processed_count - success_count
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
            progress_container.write(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count}/{total_count} —Å—Ç—Ä–æ–∫")
            if total_count > 0:
                progress_bar.progress(processed_count / total_count)
            count_text.info(f"–£—Å–ø–µ—à–Ω–æ: {success_count}, –û—à–∏–±–æ–∫: {error_count}, –û–∂–∏–¥–∞–µ—Ç: {pending_count}")
            
            # –ù–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
            rows_to_process = df[df["–°—Ç–∞—Ç—É—Å"] == "–û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏"].index.tolist()
            
            if rows_to_process:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –∑–∞ —Ä–∞–∑, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–ª—è—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                row_idx = rows_to_process[0]
                video_id = df.loc[row_idx, "ID –≤–∏–¥–µ–æ"]
                
                if video_id:
                    status_text.write(f"–û–±—Ä–∞–±–æ—Ç–∫–∞: {video_id}")
                    views = get_video_views(video_id)
                    
                    if isinstance(views, int):
                        df.loc[row_idx, "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã"] = views
                        df.loc[row_idx, "–°—Ç–∞—Ç—É—Å"] = "–£—Å–ø–µ—à–Ω–æ"
                    else:
                        df.loc[row_idx, "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã"] = "N/A"
                        df.loc[row_idx, "–°—Ç–∞—Ç—É—Å"] = views
                
                # –û–±–Ω–æ–≤–ª—è–µ–º DataFrame –≤ session_state
                st.session_state.results_df = df
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏
                time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
                st.rerun()
            else:
                # –í—Å–µ —Å—Ç—Ä–æ–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
                st.session_state.is_processing = False
                status_text.success("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        st.dataframe(df)
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV
        csv = df.to_csv(index=False).encode('utf-8')
        st.download_button(
            label="–°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ CSV",
            data=csv,
            file_name="youtube_views.csv",
            mime="text/csv",
        )
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        if st.button("–û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"):
            st.session_state.results_df = None
            st.session_state.is_processing = False
            st.rerun()
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    st.markdown("""
    ---
    ### –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ—à–µ–Ω–∏—è:
    
    1. **–î–æ–ª–≥–æ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏** - –ø—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ ID:
       - –ü—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑-–∑–∞ –∑–∞–¥–µ—Ä–∂–µ–∫ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
       - –í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç—ã–º –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ–∑–∂–µ
       - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –¥–∞–∂–µ –ø–æ—Å–ª–µ –≤—ã–≥—Ä—É–∑–∫–∏ CSV —Ñ–∞–π–ª–∞
    
    2. **–û—à–∏–±–∫–∏ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö** - YouTube –º–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:
       - –ü—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∑–∞–ø—Ä–æ—Å–æ–≤ YouTube –º–æ–∂–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à IP
       - –î–µ–ª–∞–π—Ç–µ –ø–∞—É–∑—ã –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º ID
    
    3. **–ü—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –≤–≤–æ–¥–∞**:
       - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –æ–ø—Ü–∏—é –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ –≤–≤–æ–¥–∞ (ID –∏–ª–∏ –ø–æ–ª–Ω—ã–π URL)
       - ID –≤–∏–¥–µ–æ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å 11 —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `dQw4w9WgXcQ`)
    
    *–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—è—Ö. YouTube –º–æ–∂–µ—Ç –∑–∞–ø—Ä–µ—â–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–Ω–æ –∏—Ö —É—Å–ª–æ–≤–∏—è–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.*
    """)

if __name__ == "__main__":
    main() 